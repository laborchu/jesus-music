"use strict";
const express = require("express");
const bodyParser = require("body-parser");
const path = require("path");
const compression = require("compression");
const cookieParser = require("cookie-parser");
const ejs = require("ejs");
let env = require("./env.json");
var app = express();
app.set('view engine', 'html');
app.engine('html', ejs.renderFile);
app.set('views', __dirname + '/views');
app.use(cookieParser());
function init(port, mode) {
    app.use(bodyParser.urlencoded({ extended: false }));
    app.use(bodyParser.json());
    app.use(bodyParser.text());
    app.use(compression());
    app.all('/*', function (req, res, next) {
        res.header('Access-Control-Allow-Origin', '*');
        res.header('Access-Control-Allow-Headers', 'X-Requested-With');
        next();
    });
    if (mode == 'dev') {
        let root = path.resolve(process.cwd());
        let clientRoot = path.resolve(__dirname, 'public');
        app.use(express.static(root));
        app.use(express.static(clientRoot));
        let routes = require('./routes');
        routes.init(app);
    }
    else {
        let _clientDir = '../../client/prod';
        app.use('/js', express.static(path.resolve(__dirname, _clientDir + '/js')));
        app.use('/css', express.static(path.resolve(__dirname, _clientDir + '/css')));
        app.use('/assets', express.static(path.resolve(__dirname, _clientDir + '/assets')));
        app.use('/fonts', express.static(path.resolve(__dirname, _clientDir + '/fonts')));
        let routes = require('./routes');
        routes.init(app);
        var renderIndex = function (req, res) {
            res.sendFile(path.resolve(__dirname, _clientDir + '/index.html'));
        };
        app.get('/*', renderIndex);
    }
    return new Promise((resolve, reject) => {
        let server = app.listen(port, () => {
            var port = server.address().port;
            console.log('App is listening on port:' + port);
            resolve(server);
        });
    });
}
exports.init = init;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxtQ0FBbUM7QUFDbkMsMENBQTBDO0FBQzFDLDZCQUE2QjtBQUM3QiwyQ0FBMkM7QUFFM0MsOENBQStDO0FBQy9DLDJCQUE0QjtBQUU1QixJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFaEMsSUFBSSxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7QUFDcEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDL0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ25DLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFNBQVMsR0FBRyxRQUFRLENBQUMsQ0FBQztBQUN2QyxHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7QUFFeEIsY0FBcUIsSUFBWSxFQUFFLElBQVk7SUFFN0MsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNwRCxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzNCLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDM0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBRXZCLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFVBQVMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJO1FBQ25DLEdBQUcsQ0FBQyxNQUFNLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDL0MsR0FBRyxDQUFDLE1BQU0sQ0FBQyw4QkFBOEIsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQy9ELElBQUksRUFBRSxDQUFDO0lBQ1QsQ0FBQyxDQUFDLENBQUM7SUFPSCxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNsQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBR3BDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBR25CLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLElBQUksVUFBVSxHQUFHLG1CQUFtQixDQUFDO1FBS3JDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsVUFBVSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1RSxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxVQUFVLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BGLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsVUFBVSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUdsRixJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQU9qQixJQUFJLFdBQVcsR0FBRyxVQUFTLEdBQW9CLEVBQUUsR0FBcUI7WUFDcEUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxVQUFVLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUNwRSxDQUFDLENBQUM7UUFLRixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBS0QsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFjLENBQUMsT0FBTyxFQUFFLE1BQU07UUFDOUMsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7WUFDNUIsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQztZQUNqQyxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixHQUFHLElBQUksQ0FBQyxDQUFDO1lBQ2hELE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQXJFRCxvQkFxRUM7QUFBQSxDQUFDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaHR0cCBmcm9tICdodHRwJztcbmltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgKiBhcyBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBjb21wcmVzc2lvbiBmcm9tICdjb21wcmVzc2lvbic7XG5pbXBvcnQgc2Vzc2lvbiA9IHJlcXVpcmUoJ2V4cHJlc3Mtc2Vzc2lvbicpO1xuaW1wb3J0IGNvb2tpZVBhcnNlciA9IHJlcXVpcmUoJ2Nvb2tpZS1wYXJzZXInKTtcbmltcG9ydCBlanMgPSByZXF1aXJlKCdlanMnKTtcblxubGV0IGVudiA9IHJlcXVpcmUoXCIuL2Vudi5qc29uXCIpO1xuXG52YXIgYXBwID0gZXhwcmVzcygpO1xuYXBwLnNldCgndmlldyBlbmdpbmUnLCAnaHRtbCcpO1xuYXBwLmVuZ2luZSgnaHRtbCcsIGVqcy5yZW5kZXJGaWxlKTtcbmFwcC5zZXQoJ3ZpZXdzJywgX19kaXJuYW1lICsgJy92aWV3cycpO1xuYXBwLnVzZShjb29raWVQYXJzZXIoKSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KHBvcnQ6IG51bWJlciwgbW9kZTogc3RyaW5nKSB7XG5cbiAgYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UgfSkpO1xuICBhcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbiAgYXBwLnVzZShib2R5UGFyc2VyLnRleHQoKSk7XG4gIGFwcC51c2UoY29tcHJlc3Npb24oKSk7XG5cbiAgYXBwLmFsbCgnLyonLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICAgIHJlcy5oZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicsICcqJyk7XG4gICAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycycsICdYLVJlcXVlc3RlZC1XaXRoJyk7XG4gICAgbmV4dCgpO1xuICB9KTtcblxuXG4gIC8qKlxuICAgKiBEZXYgTW9kZS5cbiAgICogQG5vdGUgRGV2IHNlcnZlciB3aWxsIG9ubHkgZ2l2ZSBmb3IgeW91IG1pZGRsZXdhcmUuXG4gICAqL1xuICBpZiAobW9kZSA9PSAnZGV2Jykge1xuICAgIGxldCByb290ID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCkpO1xuICAgIGxldCBjbGllbnRSb290ID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ3B1YmxpYycpO1xuICAgIGFwcC51c2UoZXhwcmVzcy5zdGF0aWMocm9vdCkpO1xuICAgIGFwcC51c2UoZXhwcmVzcy5zdGF0aWMoY2xpZW50Um9vdCkpO1xuXG4gICAgLy/liJ3lp4vljJbot6/nlLFcbiAgICBsZXQgcm91dGVzID0gcmVxdWlyZSgnLi9yb3V0ZXMnKTtcbiAgICByb3V0ZXMuaW5pdChhcHApO1xuICAgIFxuICAgIFxuICB9IGVsc2Uge1xuICAgIGxldCBfY2xpZW50RGlyID0gJy4uLy4uL2NsaWVudC9wcm9kJztcblxuICAgIC8qKlxuICAgICAqIFN0YXRpYy5cbiAgICAgKi9cbiAgICBhcHAudXNlKCcvanMnLCBleHByZXNzLnN0YXRpYyhwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBfY2xpZW50RGlyICsgJy9qcycpKSk7XG4gICAgYXBwLnVzZSgnL2NzcycsIGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIF9jbGllbnREaXIgKyAnL2NzcycpKSk7XG4gICAgYXBwLnVzZSgnL2Fzc2V0cycsIGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIF9jbGllbnREaXIgKyAnL2Fzc2V0cycpKSk7XG4gICAgYXBwLnVzZSgnL2ZvbnRzJywgZXhwcmVzcy5zdGF0aWMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgX2NsaWVudERpciArICcvZm9udHMnKSkpO1xuXG4gICAgLy/liJ3lp4vljJbot6/nlLFcbiAgICBsZXQgcm91dGVzID0gcmVxdWlyZSgnLi9yb3V0ZXMnKTtcbiAgICByb3V0ZXMuaW5pdChhcHApO1xuXG4gICAgLyoqXG4gICAgICogU3BhIFJlcyBTZW5kZXIuXG4gICAgICogQHBhcmFtIHJlcSB7YW55fVxuICAgICAqIEBwYXJhbSByZXMge2FueX1cbiAgICAgKi9cbiAgICB2YXIgcmVuZGVySW5kZXggPSBmdW5jdGlvbihyZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlKSB7XG4gICAgICByZXMuc2VuZEZpbGUocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgX2NsaWVudERpciArICcvaW5kZXguaHRtbCcpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUHJldmVudCBzZXJ2ZXIgcm91dGluZyBhbmQgdXNlIEBuZzItcm91dGVyLlxuICAgICAqL1xuICAgIGFwcC5nZXQoJy8qJywgcmVuZGVySW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlcnZlciB3aXRoIGd6aXAgY29tcHJlc3Npb24uXG4gICAqL1xuICByZXR1cm4gbmV3IFByb21pc2U8aHR0cC5TZXJ2ZXI+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgc2VydmVyID0gYXBwLmxpc3Rlbihwb3J0LCAoKSA9PiB7XG4gICAgICB2YXIgcG9ydCA9IHNlcnZlci5hZGRyZXNzKCkucG9ydDtcbiAgICAgIGNvbnNvbGUubG9nKCdBcHAgaXMgbGlzdGVuaW5nIG9uIHBvcnQ6JyArIHBvcnQpO1xuICAgICAgcmVzb2x2ZShzZXJ2ZXIpO1xuICAgIH0pO1xuICB9KTtcbn07XG4iXX0=
